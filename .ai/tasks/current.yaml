version: "1.0"
project: "databricks-orchestrator"
updated: "2025-01-08"

tasks:
  - id: "MVP-001"
    title: "Phase 1: Define Core Pydantic Schemas"
    status: "completed"
    priority: "high"
    description: "Define the core Pydantic schemas for Project, Task, and Patch objects. These are the foundational data structures for the entire application."
    estimated_hours: 2
    deliverables:
      - path: "src/models/schemas.py"
        type: "file"
    acceptance_criteria:
      - "Project and Task schemas are defined with all required fields."
      - "Patch schemas (ProjectPatch, TaskPatch) and the Op enum are defined."
      - "Pydantic models include validation for key fields (e.g., IDs, status enums)."
    tests:
      - type: "unit"
        description: "Test successful creation of Project, Task, and Patch objects with valid data."
      - type: "unit"
        description: "Test Pydantic validation errors for each schema with invalid data (e.g., missing required fields, wrong data types)."
      - type: "unit"
        description: "Test serialization (.model_dump_json()) and deserialization (.model_validate_json()) for each schema."

  - id: "MVP-002"
    title: "Phase 1: Design and Implement Storage Interface"
    status: "completed"
    priority: "high"
    description: "Design the abstract base class for the storage repository and implement it for SQL. This decouples the application from the database."
    dependencies:
      - "MVP-001"
    estimated_hours: 3
    deliverables:
      - path: "src/storage/interface.py"
        type: "file"
      - path: "src/storage/sql_implementation.py"
        type: "file"
    acceptance_criteria:
      - "StorageInterface defines all necessary CRUD and patch methods."
      - "SQLStorage class implements all methods from the interface."
      - "SQLAlchemy models for Project and Task are created with correct relationships."
      - "Transactional logic is correctly handled in the apply_patch methods."
    tests:
      - type: "unit"
        description: "Mock the SQLAlchemy session and test that each method in SQLStorage calls the correct session methods."
      - type: "unit"
        description: "Test the internal logic of apply_project_patch and apply_task_patch to ensure it correctly handles create, update, and delete operations."
      - type: "integration"
        description: "Using an in-memory SQLite database, test the full lifecycle: create project, add task, update task, delete task, and verify the state at each step."
      - type: "integration"
        description: "Test that if one part of a patch fails, the entire transaction is rolled back and the database state remains unchanged."

  - id: "MVP-003a"
    title: "Phase 2: Implement AgentBase Class"
    status: "completed"
    priority: "high"
    description: "Create the abstract base class for all agents that handles common functionality like LLM communication, JSON parsing, validation, and retry logic."
    dependencies:
      - "MVP-001"
    estimated_hours: 1
    deliverables:
      - path: "src/agent/base.py"
        type: "file"
    acceptance_criteria:
      - "AgentBase abstract class is created with abstract method get_diff()."
      - "Base class implements retry mechanism for JSON parsing (configurable retries, default 2)."
      - "Base class handles Pydantic validation of patches."
      - "Base class provides common LLM client initialization."
    tests:
      - type: "unit"
        description: "Test retry mechanism with mocked LLM returning invalid JSON first, then valid JSON."
      - type: "unit"
        description: "Test that validation errors are properly caught and retried with helpful error messages."
      - type: "unit"
        description: "Test that after max retries, appropriate exception is raised."

  - id: "MVP-003b"
    title: "Phase 2: Implement PlannerAgent"
    status: "completed"
    priority: "high"
    description: "Create the PlannerAgent that takes high-level project ideas and returns ProjectPatch objects to create/update project metadata."
    dependencies:
      - "MVP-003a"
    estimated_hours: 10
    actual_hours: 10
    deliverables:
      - path: "src/agent/planner_agent.py"
        type: "file"
      - path: "tests/test_planner_agent_simple.py"
        type: "file"
      - path: "tests/test_planner_agent.py"
        type: "file"
      - path: "tests/test_planner_integration.py"
        type: "file"
      - path: "docs/agents/planner_agent.md"
        type: "file"
    acceptance_criteria:
      - "PlannerAgent extends AgentBase with 98% test coverage."
      - "Agent takes raw project idea and returns Patch with ProjectPatch and optional TaskPatches."
      - "Agent supports configurable milestone creation (0-8 milestones)."
      - "Agent includes context-aware behavior with override support."
      - "Multi-provider support (OpenAI, Anthropic, Gemini, XAI)."
      - "Comprehensive validation and enhancement of generated data."
      - "Production-ready documentation and examples."
    tests:
      - type: "unit"
        description: "13 comprehensive unit tests covering all PlannerAgent functionality."
      - type: "integration"
        description: "7 integration tests with real-world project scenarios."
      - type: "comprehensive"
        description: "16 detailed tests covering edge cases and error handling."
      - type: "coverage"
        description: "98% code coverage achieved with 36 total tests."

  # NEW UI IMPLEMENTATION TASKS - HIGH PRIORITY
  - id: "UI-001"
    title: "Phase 3: Setup FastAPI Backend with PlannerAgent Endpoints"
    status: "completed"
    priority: "high"
    description: "Create a FastAPI backend application with REST endpoints to expose PlannerAgent functionality. This includes request/response models, configuration endpoints, and proper error handling."
    dependencies:
      - "MVP-003b"
    estimated_hours: 2
    deliverables:
      - path: "src/api/__init__.py"
        type: "file"
      - path: "src/api/main.py"
        type: "file"
      - path: "src/api/models.py"
        type: "file"
      - path: "src/api/planner_routes.py"
        type: "file"
      - path: "requirements-api.txt"
        type: "file"
    acceptance_criteria:
      - "FastAPI application is created with proper CORS configuration."
      - "POST /api/planner/generate endpoint accepts project ideas and returns structured results."
      - "GET /api/planner/providers endpoint returns available AI providers and models."
      - "GET /api/planner/config endpoint returns default configuration options."
      - "Pydantic models for requests/responses with proper validation."
      - "Comprehensive error handling with user-friendly messages."
      - "API documentation auto-generated with OpenAPI/Swagger."
    tests:
      - type: "unit"
        description: "Test PlannerConfig model validation with valid and invalid configurations."
      - type: "unit"
        description: "Test API request/response models serialization and deserialization."
      - type: "integration"
        description: "Test /api/planner/generate endpoint with FastAPI TestClient and mock PlannerAgent."
      - type: "integration"
        description: "Test /api/planner/providers endpoint returns correct provider configurations."
      - type: "integration"
        description: "Test error handling for invalid requests, missing API keys, and agent failures."
      - type: "integration"
        description: "Test CORS headers are properly set for frontend communication."

  - id: "UI-002"
    title: "Phase 3: Create React Application with Tailwind CSS"
    status: "completed"
    priority: "high"
    description: "Set up a modern React application with TypeScript, Tailwind CSS, and essential development tools. Create the basic project structure and component architecture."
    dependencies:
      - "UI-001"
    estimated_hours: 2
    deliverables:
      - path: "frontend/package.json"
        type: "file"
      - path: "frontend/tsconfig.json"
        type: "file"
      - path: "frontend/tailwind.config.js"
        type: "file"
      - path: "frontend/vite.config.ts"
        type: "file"
      - path: "frontend/src/App.tsx"
        type: "file"
      - path: "frontend/src/types/api.ts"
        type: "file"
      - path: "frontend/src/hooks/usePlannerAPI.ts"
        type: "file"
      - path: "frontend/src/hooks/useLocalStorage.ts"
        type: "file"
    acceptance_criteria:
      - "React 18 application with TypeScript and Vite build system."
      - "Tailwind CSS configured with custom theme and responsive design."
      - "ESLint and Prettier configured for code quality."
      - "TypeScript interfaces for all API request/response types."
      - "Custom hooks for API integration and local storage persistence."
      - "Development server with hot module replacement."
      - "Production build configuration with optimization."
    tests:
      - type: "unit"
        description: "Test App.tsx component renders without crashing."
      - type: "unit"
        description: "Test API TypeScript types match backend Pydantic models."
      - type: "unit"
        description: "Test usePlannerAPI hook handles API calls and error states."
      - type: "unit"
        description: "Test useLocalStorage hook persists and retrieves user preferences."
      - type: "integration"
        description: "Test development server starts and serves the application."
      - type: "integration"
        description: "Test production build creates optimized bundle."

  - id: "UI-003"
    title: "Phase 3: Implement PlannerForm Component with Configuration"
    status: "pending"
    priority: "high"
    description: "Create a comprehensive form component for inputting project ideas with advanced configuration options including provider selection, model settings, and milestone configuration."
    dependencies:
      - "UI-002"
    estimated_hours: 3
    deliverables:
      - path: "frontend/src/components/PlannerForm.tsx"
        type: "file"
      - path: "frontend/src/components/ConfigPanel.tsx"
        type: "file"
      - path: "frontend/src/components/ProviderSelector.tsx"
        type: "file"
      - path: "frontend/src/components/ModelSelector.tsx"
        type: "file"
      - path: "frontend/src/components/MilestoneConfig.tsx"
        type: "file"
      - path: "frontend/src/components/AdvancedOptions.tsx"
        type: "file"
    acceptance_criteria:
      - "Large textarea for project idea input with helpful placeholder text."
      - "Provider dropdown with dynamic model selection (OpenAI, Anthropic, Gemini, XAI)."
      - "Milestone configuration with toggle and adjustable max count slider."
      - "Advanced options panel for retry settings and other parameters."
      - "Real-time form validation with user-friendly error messages."
      - "Responsive design that works on mobile and desktop."
      - "Accessibility features (ARIA labels, keyboard navigation)."
      - "Form state persistence using localStorage."
    tests:
      - type: "unit"
        description: "Test PlannerForm component renders all form elements correctly."
      - type: "unit"
        description: "Test ConfigPanel shows/hides based on user interaction."
      - type: "unit"
        description: "Test ProviderSelector updates available models when provider changes."
      - type: "unit"
        description: "Test ModelSelector displays correct models for selected provider."
      - type: "unit"
        description: "Test MilestoneConfig toggle enables/disables milestone settings."
      - type: "unit"
        description: "Test form validation prevents submission with invalid data."
      - type: "integration"
        description: "Test form submission calls API with correct configuration."
      - type: "integration"
        description: "Test form state persists across browser sessions."
      - type: "accessibility"
        description: "Test form is accessible with screen readers and keyboard navigation."

  - id: "UI-004"
    title: "Phase 3: Build ResultsDisplay Component with Visualization"
    status: "pending"
    priority: "high"
    description: "Create a sophisticated results display component that visualizes generated project metadata and milestone tasks in a clean, readable format with interactive features."
    dependencies:
      - "UI-003"
    estimated_hours: 3
    deliverables:
      - path: "frontend/src/components/ResultsDisplay.tsx"
        type: "file"
      - path: "frontend/src/components/ProjectCard.tsx"
        type: "file"
      - path: "frontend/src/components/TaskList.tsx"
        type: "file"
      - path: "frontend/src/components/TaskCard.tsx"
        type: "file"
      - path: "frontend/src/components/JsonViewer.tsx"
        type: "file"
      - path: "frontend/src/components/EstimateVisualization.tsx"
        type: "file"
      - path: "frontend/src/components/PriorityBadge.tsx"
        type: "file"
      - path: "frontend/src/components/StatusBadge.tsx"
        type: "file"
    acceptance_criteria:
      - "Clean card-based layout for project metadata display."
      - "Collapsible milestone tasks list with expand/collapse functionality."
      - "Visual representation of estimated hours and priority levels."
      - "Toggle between user-friendly view and raw JSON view."
      - "Color-coded priority and status badges."
      - "Responsive design with mobile-first approach."
      - "Copy to clipboard functionality for generated content."
      - "Export options (JSON, markdown, text)."
    tests:
      - type: "unit"
        description: "Test ResultsDisplay component renders project data correctly."
      - type: "unit"
        description: "Test ProjectCard displays all project metadata fields."
      - type: "unit"
        description: "Test TaskList component handles empty and populated task arrays."
      - type: "unit"
        description: "Test TaskCard component shows task details and estimates."
      - type: "unit"
        description: "Test JsonViewer component displays formatted JSON with syntax highlighting."
      - type: "unit"
        description: "Test EstimateVisualization component shows progress bars and time estimates."
      - type: "unit"
        description: "Test PriorityBadge and StatusBadge components show correct colors."
      - type: "integration"
        description: "Test collapse/expand functionality works for all collapsible elements."
      - type: "integration"
        description: "Test copy to clipboard functionality works across different browsers."
      - type: "integration"
        description: "Test export functionality generates correct file formats."

  - id: "UI-005"
    title: "Phase 3: Add Error Handling and Loading States"
    status: "pending"
    priority: "high"
    description: "Implement comprehensive error handling, loading states, and user feedback mechanisms to create a robust and user-friendly experience."
    dependencies:
      - "UI-004"
    estimated_hours: 2
    deliverables:
      - path: "frontend/src/components/LoadingSpinner.tsx"
        type: "file"
      - path: "frontend/src/components/ErrorMessage.tsx"
        type: "file"
      - path: "frontend/src/components/SuccessMessage.tsx"
        type: "file"
      - path: "frontend/src/components/SkeletonLoader.tsx"
        type: "file"
      - path: "frontend/src/hooks/useErrorHandler.ts"
        type: "file"
      - path: "frontend/src/utils/errorUtils.ts"
        type: "file"
      - path: "frontend/src/contexts/NotificationContext.tsx"
        type: "file"
    acceptance_criteria:
      - "Loading spinners and skeleton loaders for all async operations."
      - "User-friendly error messages with actionable suggestions."
      - "Success notifications for completed operations."
      - "Network error handling with retry mechanisms."
      - "API error parsing and user-friendly message display."
      - "Global error boundary for unhandled exceptions."
      - "Toast notifications for non-blocking feedback."
      - "Loading states that don't block other UI interactions."
    tests:
      - type: "unit"
        description: "Test LoadingSpinner component renders with different sizes and colors."
      - type: "unit"
        description: "Test ErrorMessage component displays error details and retry options."
      - type: "unit"
        description: "Test SuccessMessage component shows success feedback appropriately."
      - type: "unit"
        description: "Test SkeletonLoader component matches the layout of actual content."
      - type: "unit"
        description: "Test useErrorHandler hook processes different error types correctly."
      - type: "unit"
        description: "Test errorUtils functions format error messages for user display."
      - type: "integration"
        description: "Test error boundary catches and displays unhandled exceptions."
      - type: "integration"
        description: "Test toast notifications appear and disappear correctly."
      - type: "integration"
        description: "Test retry mechanisms work for failed API calls."

  - id: "UI-006"
    title: "Phase 3: Polish UI/UX and Add Responsive Design"
    status: "pending"
    priority: "high"
    description: "Finalize the user interface with professional styling, responsive design, accessibility improvements, and performance optimizations."
    dependencies:
      - "UI-005"
    estimated_hours: 2
    deliverables:
      - path: "frontend/src/styles/globals.css"
        type: "file"
      - path: "frontend/src/styles/components.css"
        type: "file"
      - path: "frontend/src/utils/animations.ts"
        type: "file"
      - path: "frontend/src/utils/responsive.ts"
        type: "file"
      - path: "frontend/src/components/Layout.tsx"
        type: "file"
      - path: "frontend/src/components/Header.tsx"
        type: "file"
      - path: "frontend/src/components/Footer.tsx"
        type: "file"
    acceptance_criteria:
      - "Professional color scheme with consistent design language."
      - "Mobile-first responsive design that works on all screen sizes."
      - "Smooth animations and transitions for user interactions."
      - "Accessibility compliance (WCAG 2.1 AA standards)."
      - "Performance optimization (lazy loading, code splitting)."
      - "Cross-browser compatibility (Chrome, Firefox, Safari, Edge)."
      - "Print styles for generating reports."
      - "Dark mode support with theme switching."
    tests:
      - type: "unit"
        description: "Test Layout component renders header, main content, and footer."
      - type: "unit"
        description: "Test Header component includes navigation and theme toggle."
      - type: "unit"
        description: "Test Footer component displays project information and links."
      - type: "integration"
        description: "Test responsive design at different breakpoints (mobile, tablet, desktop)."
      - type: "integration"
        description: "Test animations and transitions work smoothly."
      - type: "accessibility"
        description: "Test accessibility compliance with automated tools (axe, lighthouse)."
      - type: "performance"
        description: "Test page load times and bundle size optimizations."
      - type: "cross-browser"
        description: "Test functionality across different browsers and versions."
      - type: "visual"
        description: "Test dark mode and theme switching functionality."

  # DEFERRED TASKS - LOWER PRIORITY
  - id: "MVP-003c"
    title: "Phase 2: Implement DecomposerAgent (DEFERRED)"
    status: "pending"
    priority: "medium"
    description: "Create the DecomposerAgent that splits projects or tasks into n approximately equal subtasks."
    dependencies:
      - "MVP-003a"
    estimated_hours: 1
    deliverables:
      - path: "src/agent/decomposer_agent.py"
        type: "file"
    acceptance_criteria:
      - "DecomposerAgent extends AgentBase."
      - "Agent takes a Project/Task node and target number n (default 6)."
      - "Agent returns patch with 'add' operations creating n children with balanced estimated_hours."
      - "Agent preserves total effort by dividing parent's estimated_hours by n."
      - "Works recursively - can decompose tasks into subtasks."
    tests:
      - type: "unit"
        description: "Test decomposition of project with 60 hours into 6 tasks of ~10 hours each."
      - type: "unit"
        description: "Test decomposition of task into subtasks maintains effort balance."
      - type: "unit"
        description: "Verify patch contains only 'add' operations with correct paths."

  - id: "MVP-003d"
    title: "Phase 2: Implement EditorAgent (DEFERRED)"
    status: "pending"
    priority: "medium"
    description: "Create the EditorAgent that modifies existing projects or tasks based on user feedback and additional context."
    dependencies:
      - "MVP-003a"
    estimated_hours: 1
    deliverables:
      - path: "src/agent/editor_agent.py"
        type: "file"
    acceptance_criteria:
      - "EditorAgent extends AgentBase."
      - "Agent takes current Project/Task state plus user instructions for modifications."
      - "Agent returns minimal patch with 'replace', 'remove', or 'add' operations."
      - "Agent preserves unrelated fields (only changes what user requests)."
      - "Handles various edit types: update descriptions, change estimates, rename, reorder, etc."
    tests:
      - type: "unit"
        description: "Test editing task description returns patch with single 'replace' operation."
      - type: "unit"
        description: "Test removing a field returns patch with 'remove' operation."
      - type: "unit"
        description: "Verify unmentioned fields are not included in patch."

  - id: "MVP-003e"
    title: "Phase 2: Implement AgentFactory (DEFERRED)"
    status: "pending"
    priority: "medium"
    description: "Create the factory class that instantiates the correct agent based on conversation intent."
    dependencies:
      - "MVP-003b"
      - "MVP-003c"
      - "MVP-003d"
    estimated_hours: 0.5
    deliverables:
      - path: "src/agent/factory.py"
        type: "file"
    acceptance_criteria:
      - "AgentFactory has get_agent(intent: Literal['plan', 'split', 'edit']) method."
      - "Factory returns correct agent instance based on intent."
      - "Factory handles LLM client injection for all agents."
      - "Clear error handling for unknown intents."
    tests:
      - type: "unit"
        description: "Test factory returns PlannerAgent for 'plan' intent."
      - type: "unit"
        description: "Test factory returns DecomposerAgent for 'split' intent."
      - type: "unit"
        description: "Test factory returns EditorAgent for 'edit' intent."
      - type: "unit"
        description: "Test factory raises ValueError for unknown intent."

  - id: "MVP-004"
    title: "Phase 2: Develop Agent Prompt Templates (DEFERRED)"
    status: "pending"
    priority: "medium"
    description: "Develop and refine the prompt templates for all three agent types (Planner, Decomposer, Editor). These prompts are critical for guiding the LLM to produce the correct output."
    dependencies:
      - "MVP-003e"
    estimated_hours: 2
    deliverables:
      - path: "src/agent/prompts.py"
        type: "file"
    acceptance_criteria:
      - "Planner prompt instructs AI on high-level project structuring and metadata generation."
      - "Decomposer prompt instructs AI on balanced task splitting with effort preservation."
      - "Editor prompt instructs AI on minimal, targeted modifications."
      - "All prompts share common system instructions (JSON patch output only, RFC 6902 compliance)."
      - "Prompts use Jinja2 templating for variable injection."
    tests:
      - type: "unit"
        description: "Test that the prompt formatting function correctly injects context (e.g., project state, user message) into each template."
      - type: "unit"
        description: "Verify all prompts include JSON schema examples and constraints."
      - type: "unit"
        description: "Test prompt size stays within reasonable token limits for various input sizes."

  - id: "MVP-005"
    title: "Phase 4: Build Backend API and Orchestration Logic (DEFERRED)"
    status: "pending"
    priority: "low"
    description: "Set up the FastAPI application, define the API endpoints, and create the orchestration service that connects the agent and storage layers."
    dependencies:
      - "MVP-002"
      - "MVP-003e"
    estimated_hours: 3
    deliverables:
      - path: "src/main.py"
        type: "file"
      - path: "src/orchestration/api.py"
        type: "file"
      - path: "src/orchestration/chat_service.py"
        type: "file"
    acceptance_criteria:
      - "FastAPI app is initialized in src/main.py."
      - "API endpoints for projects, tasks, and patches are defined in src/orchestration/api.py."
      - "Chat service in src/orchestration/chat_service.py correctly handles the logic of calling the agent and storage layer."
    tests:
      - type: "unit"
        description: "With a mocked DiffAgent and StorageInterface, test that the chat_service correctly calls the agent and then the storage layer's apply_patch method."
      - type: "integration"
        description: "Using FastAPI's TestClient, test the POST /projects endpoint and verify a project is created in the test database."
      - type: "integration"
        description: "Test the POST /projects/{project_id}/chat endpoint, mocking the DiffAgent to return a predictable patch, and verify the patch is applied to the database."
      - type: "integration"
        description: "Test API error handling for invalid requests or when underlying services (agent, storage) fail."

  - id: "MVP-006"
    title: "Phase 5: Create Front-End HTML and JS Structure (DEFERRED)"
    status: "pending"
    priority: "low"
    description: "Create the basic file structure for the front-end, including the main HTML file and separate JavaScript files for UI, API, and main logic."
    estimated_hours: 1
    deliverables:
      - path: "frontend/index.html"
        type: "file"
      - path: "frontend/ui.js"
        type: "file"
      - path: "frontend/api.js"
        type: "file"
      - path: "frontend/main.js"
        type: "file"
    acceptance_criteria:
      - "The frontend/ directory is created."
      - "index.html contains the core divs for project view, chat, and diff view."
      - "Empty JavaScript files for ui.js, api.js, and main.js are created."
    tests:
      - type: "static"
        description: "Run a linter (e.g., ESLint, Prettier) to check for valid HTML and JavaScript syntax."

  - id: "MVP-007"
    title: "Phase 5: Implement Front-End Rendering and API Logic (DEFERRED)"
    status: "pending"
    priority: "low"
    description: "Implement the JavaScript logic for rendering the project hierarchy, displaying diffs, and communicating with the backend API."
    dependencies:
      - "MVP-006"
    estimated_hours: 2
    deliverables:
      - path: "frontend/ui.js"
        type: "file"
      - path: "frontend/api.js"
        type: "file"
    acceptance_criteria:
      - "renderProject function correctly builds the nested list view."
      - "renderDiff function pretty-prints the JSON patch."
      - "API functions for all backend endpoints are implemented using fetch."
    tests:
      - type: "unit"
        description: "Using Jest and jsdom, test that renderProject generates the correct HTML structure from sample project JSON."
      - type: "unit"
        description: "Using a mock fetch, test that the api.js functions call the correct backend URLs with the right method and body."

  - id: "MVP-008"
    title: "Phase 4: Wire Up Front-End User Interaction"
    status: "pending"
    priority: "medium"
    description: "Implement the main event handling logic for the front-end, including chat submission and patch approval."
    dependencies:
      - "MVP-007"
    estimated_hours: 2
    deliverables:
      - path: "frontend/main.js"
        type: "file"
    acceptance_criteria:
      - "Chat submission correctly calls the API and renders the returned diff."
      - "Accepting a diff calls the apply-patch endpoint and refreshes the project view."
      - "The application correctly handles the initial state (creating a new project)."
    tests:
      - type: "e2e"
        description: "Using Playwright or Selenium, run a full user flow: start the backend, open the UI, create a project via chat, accept the diff, and verify the UI updates."
      - type: "e2e"
        description: "Verify that after the UI updates, the data is correctly persisted by checking the state of the test database."
