version: "1.0"
project: "databricks-orchestrator"
updated: "2025-01-09"

tasks:
  - id: "MVP-001"
    title: "Phase 1: Define Core Pydantic Schemas"
    status: "completed"
    priority: "high"
    description: "Define the core Pydantic schemas for Project, Task, and Patch objects. These are the foundational data structures for the entire application."
    estimated_hours: 2
    deliverables:
      - path: "src/models/schemas.py"
        type: "file"
    acceptance_criteria:
      - "Project and Task schemas are defined with all required fields."
      - "Patch schemas (ProjectPatch, TaskPatch) and the Op enum are defined."
      - "Pydantic models include validation for key fields (e.g., IDs, status enums)."
    tests:
      - type: "unit"
        description: "Test successful creation of Project, Task, and Patch objects with valid data."
      - type: "unit"
        description: "Test Pydantic validation errors for each schema with invalid data (e.g., missing required fields, wrong data types)."
      - type: "unit"
        description: "Test serialization (.model_dump_json()) and deserialization (.model_validate_json()) for each schema."

  - id: "MVP-002"
    title: "Phase 1: Design and Implement Storage Interface"
    status: "completed"
    priority: "high"
    description: "Design the abstract base class for the storage repository and implement it for SQL. This decouples the application from the database."
    dependencies:
      - "MVP-001"
    estimated_hours: 3
    deliverables:
      - path: "src/storage/interface.py"
        type: "file"
      - path: "src/storage/sql_implementation.py"
        type: "file"
    acceptance_criteria:
      - "StorageInterface defines all necessary CRUD and patch methods."
      - "SQLStorage class implements all methods from the interface."
      - "SQLAlchemy models for Project and Task are created with correct relationships."
      - "Transactional logic is correctly handled in the apply_patch methods."
    tests:
      - type: "unit"
        description: "Mock the SQLAlchemy session and test that each method in SQLStorage calls the correct session methods."
      - type: "unit"
        description: "Test the internal logic of apply_project_patch and apply_task_patch to ensure it correctly handles create, update, and delete operations."
      - type: "integration"
        description: "Using an in-memory SQLite database, test the full lifecycle: create project, add task, update task, delete task, and verify the state at each step."
      - type: "integration"
        description: "Test that if one part of a patch fails, the entire transaction is rolled back and the database state remains unchanged."

  - id: "MVP-003a"
    title: "Phase 2: Implement AgentBase Class"
    status: "completed"
    priority: "high"
    description: "Create the abstract base class for all agents that handles common functionality like LLM communication, JSON parsing, validation, and retry logic."
    dependencies:
      - "MVP-001"
    estimated_hours: 1
    deliverables:
      - path: "src/agent/base.py"
        type: "file"
    acceptance_criteria:
      - "AgentBase abstract class is created with abstract method get_diff()."
      - "Base class implements retry mechanism for JSON parsing (configurable retries, default 2)."
      - "Base class handles Pydantic validation of patches."
      - "Base class provides common LLM client initialization."
    tests:
      - type: "unit"
        description: "Test retry mechanism with mocked LLM returning invalid JSON first, then valid JSON."
      - type: "unit"
        description: "Test that validation errors are properly caught and retried with helpful error messages."
      - type: "unit"
        description: "Test that after max retries, appropriate exception is raised."

  - id: "MVP-003b"
    title: "Phase 2: Implement PlannerAgent"
    status: "completed"
    priority: "high"
    description: "Create the PlannerAgent that takes high-level project ideas and returns ProjectPatch objects to create/update project metadata."
    dependencies:
      - "MVP-003a"
    estimated_hours: 10
    actual_hours: 10
    deliverables:
      - path: "src/agent/planner_agent.py"
        type: "file"
      - path: "tests/test_planner_agent_simple.py"
        type: "file"
      - path: "tests/test_planner_agent.py"
        type: "file"
      - path: "tests/test_planner_integration.py"
        type: "file"
      - path: "docs/agents/planner_agent.md"
        type: "file"
    acceptance_criteria:
      - "PlannerAgent extends AgentBase with 98% test coverage."
      - "Agent takes raw project idea and returns Patch with ProjectPatch and optional TaskPatches."
      - "Agent supports configurable milestone creation (0-8 milestones)."
      - "Agent includes context-aware behavior with override support."
      - "Multi-provider support (OpenAI, Anthropic, Gemini, XAI)."
      - "Comprehensive validation and enhancement of generated data."
      - "Production-ready documentation and examples."
    tests:
      - type: "unit"
        description: "13 comprehensive unit tests covering all PlannerAgent functionality."
      - type: "integration"
        description: "7 integration tests with real-world project scenarios."
      - type: "comprehensive"
        description: "16 detailed tests covering edge cases and error handling."
      - type: "coverage"
        description: "98% code coverage achieved with 36 total tests."

  # NEW UI IMPLEMENTATION TASKS - HIGH PRIORITY
  - id: "UI-001"
    title: "Phase 3: Setup FastAPI Backend with PlannerAgent Endpoints"
    status: "completed"
    completion_date: "2025-01-09"
    actual_hours: 2
    priority: "high"
    description: "Create a FastAPI backend application with REST endpoints to expose PlannerAgent functionality. This includes request/response models, configuration endpoints, and proper error handling."
    dependencies:
      - "MVP-003b"
    estimated_hours: 2
    deliverables:
      - path: "src/api/__init__.py"
        type: "file"
      - path: "src/api/main.py"
        type: "file"
      - path: "src/api/models.py"
        type: "file"
      - path: "src/api/planner_routes.py"
        type: "file"
      - path: "requirements-api.txt"
        type: "file"
    acceptance_criteria:
      - "FastAPI application is created with proper CORS configuration."
      - "POST /api/planner/generate endpoint accepts project ideas and returns structured results."
      - "GET /api/planner/providers endpoint returns available AI providers and models."
      - "GET /api/planner/config endpoint returns default configuration options."
      - "Pydantic models for requests/responses with proper validation."
      - "Comprehensive error handling with user-friendly messages."
      - "API documentation auto-generated with OpenAPI/Swagger."
    tests:
      - type: "unit"
        description: "Test PlannerConfig model validation with valid and invalid configurations."
      - type: "unit"
        description: "Test API request/response models serialization and deserialization."
      - type: "integration"
        description: "Test /api/planner/generate endpoint with FastAPI TestClient and mock PlannerAgent."
      - type: "integration"
        description: "Test /api/planner/providers endpoint returns correct provider configurations."
      - type: "integration"
        description: "Test error handling for invalid requests, missing API keys, and agent failures."
      - type: "integration"
        description: "Test CORS headers are properly set for frontend communication."

  - id: "UI-002"
    title: "Phase 3: Create React Application with Tailwind CSS"
    status: "completed"
    completion_date: "2025-01-09"
    actual_hours: 8
    note: "Includes full 3-panel layout with comprehensive component architecture and 96 passing tests"
    priority: "high"
    description: "Set up a modern React application with TypeScript, Tailwind CSS, and essential development tools. Create the basic project structure and component architecture."
    dependencies:
      - "UI-001"
    estimated_hours: 2
    deliverables:
      - path: "frontend/package.json"
        type: "file"
      - path: "frontend/tsconfig.json"
        type: "file"
      - path: "frontend/tailwind.config.js"
        type: "file"
      - path: "frontend/vite.config.ts"
        type: "file"
      - path: "frontend/src/App.tsx"
        type: "file"
      - path: "frontend/src/types/api.ts"
        type: "file"
      - path: "frontend/src/hooks/usePlannerAPI.ts"
        type: "file"
      - path: "frontend/src/hooks/useLocalStorage.ts"
        type: "file"
    acceptance_criteria:
      - "React 18 application with TypeScript and Vite build system."
      - "Tailwind CSS configured with custom theme and responsive design."
      - "ESLint and Prettier configured for code quality."
      - "TypeScript interfaces for all API request/response types."
      - "Custom hooks for API integration and local storage persistence."
      - "Development server with hot module replacement."
      - "Production build configuration with optimization."
    tests:
      - type: "unit"
        description: "Test App.tsx component renders without crashing."
      - type: "unit"
        description: "Test API TypeScript types match backend Pydantic models."
      - type: "unit"
        description: "Test usePlannerAPI hook handles API calls and error states."
      - type: "unit"
        description: "Test useLocalStorage hook persists and retrieves user preferences."
      - type: "integration"
        description: "Test development server starts and serves the application."
      - type: "integration"
        description: "Test production build creates optimized bundle."

  # REMOVED - UI-003: No longer relevant, we built a 3-panel layout instead of separate form components

  # REMOVED - UI-004: Components already built (TaskCard, ProjectDetails, etc.) with better architecture

  # REMOVED - UI-005: Error handling and loading states already implemented in existing components

  # REMOVED - UI-006: UI polish and responsive design already implemented with Tailwind CSS

  # NEW HIGH PRIORITY TASKS - CONNECTING FRONTEND TO BACKEND
  - id: "API-001"
    title: "Phase 3: Implement Project & Task CRUD API Routes"
    status: "completed"
    completion_date: "2025-01-09"
    actual_hours: 4
    priority: "high"
    description: "Add comprehensive REST API endpoints for project and task management to connect the React frontend with the existing SQL storage layer."
    dependencies:
      - "MVP-002"  # SQL storage interface
      - "UI-001"   # FastAPI backend setup
    estimated_hours: 4
    deliverables:
      - path: "backend/src/api/project_routes.py"
        type: "file"
      - path: "backend/src/api/task_routes.py"
        type: "file"
      - path: "backend/src/api/models.py"
        type: "file"
        description: "Extend existing models with CRUD request/response schemas"
    acceptance_criteria:
      - "GET /api/projects - List all projects with optional filtering"
      - "POST /api/projects - Create new project with validation"
      - "GET /api/projects/{id} - Get project details with tasks"
      - "PUT /api/projects/{id} - Update project with partial updates"
      - "DELETE /api/projects/{id} - Delete project and cascade to tasks"
      - "GET /api/tasks - List tasks with project filtering"
      - "POST /api/tasks - Create new task with validation"
      - "GET /api/tasks/{id} - Get task details with subtasks"
      - "PUT /api/tasks/{id} - Update task with partial updates"
      - "DELETE /api/tasks/{id} - Delete task and cascade to subtasks"
      - "GET /api/projects/{id}/tasks - Get all tasks for a project"
      - "Proper HTTP status codes and error responses"
      - "Request/response validation with Pydantic models"
      - "Integration with existing SQL storage layer"
    tests:
      - type: "unit"
        description: "Test all route handlers with valid and invalid request data"
      - type: "unit"
        description: "Test request/response model validation and serialization"
      - type: "unit"
        description: "Test error handling for non-existent resources and validation errors"
      - type: "integration"
        description: "Test full CRUD lifecycle for projects using TestClient"
      - type: "integration"
        description: "Test full CRUD lifecycle for tasks using TestClient"
      - type: "integration"
        description: "Test cascade delete behavior for projects and tasks"
      - type: "integration"
        description: "Test filtering and pagination for list endpoints"
      - type: "integration"
        description: "Test database transactions and rollback on failures"
      - type: "performance"
        description: "Test API response times under load with multiple concurrent requests"
      - type: "security"
        description: "Test input validation and SQL injection prevention"

  - id: "API-002"
    title: "Phase 3: Create Orchestration Service Layer"
    status: "pending"
    priority: "high"
    description: "Build a service layer to coordinate between AI agents, storage layer, and API endpoints, providing business logic and transaction management."
    dependencies:
      - "API-001"
      - "MVP-003b"  # PlannerAgent
    estimated_hours: 3
    deliverables:
      - path: "backend/src/orchestration/__init__.py"
        type: "file"
      - path: "backend/src/orchestration/project_service.py"
        type: "file"
      - path: "backend/src/orchestration/task_service.py"
        type: "file"
      - path: "backend/src/orchestration/agent_service.py"
        type: "file"
    acceptance_criteria:
      - "ProjectService handles all project business logic and validation"
      - "TaskService handles all task business logic and hierarchical operations"
      - "AgentService coordinates between different AI agents and data operations"
      - "Service methods for all CRUD operations with proper error handling"
      - "Integration with PlannerAgent for AI-powered project generation"
      - "Patch application logic for atomic updates"
      - "Transaction management across multiple operations"
      - "Dependency injection for storage and agent components"
    tests:
      - type: "unit"
        description: "Test ProjectService methods with mocked storage and agent dependencies"
      - type: "unit"
        description: "Test TaskService methods including hierarchical operations"
      - type: "unit"
        description: "Test AgentService coordination between agents and storage"
      - type: "unit"
        description: "Test error handling and validation in all service methods"
      - type: "integration"
        description: "Test service layer integration with real SQL storage"
      - type: "integration"
        description: "Test service layer integration with PlannerAgent"
      - type: "integration"
        description: "Test transaction handling across multiple service operations"
      - type: "integration"
        description: "Test patch application with complex multi-operation patches"

  - id: "UI-007"
    title: "Phase 3: Connect Frontend to Backend APIs"
    status: "pending"
    priority: "high"
    description: "Replace mock data in the React frontend with real API integration, implementing proper loading states, error handling, and data synchronization."
    dependencies:
      - "API-001"
      - "UI-002"  # React application setup
    estimated_hours: 5
    deliverables:
      - path: "frontend/src/services/api.ts"
        type: "file"
        description: "Base API client with authentication and error handling"
      - path: "frontend/src/services/projectService.ts"
        type: "file"
        description: "Project-specific API operations"
      - path: "frontend/src/services/taskService.ts"
        type: "file"
        description: "Task-specific API operations"
      - path: "frontend/src/hooks/useProjectManagement.ts"
        type: "file"
        description: "Updated hook with real API integration"
      - path: "frontend/src/types/api.ts"
        type: "file"
        description: "TypeScript interfaces matching backend API schemas"
    acceptance_criteria:
      - "All project CRUD operations work through backend API"
      - "All task CRUD operations work through backend API"
      - "Loading states display during API calls"
      - "Error handling with user-friendly messages"
      - "Optimistic updates for better UX"
      - "Data persistence verified in backend database"
      - "TypeScript interfaces match backend Pydantic models"
      - "Proper HTTP status code handling"
      - "Network retry logic for failed requests"
    tests:
      - type: "unit"
        description: "Test API service methods with mocked HTTP responses"
      - type: "unit"
        description: "Test TypeScript interfaces match expected API responses"
      - type: "unit"
        description: "Test error handling for different HTTP status codes"
      - type: "unit"
        description: "Test loading state management in hooks"
      - type: "integration"
        description: "Test full project lifecycle through UI with real backend"
      - type: "integration"
        description: "Test full task lifecycle through UI with real backend"
      - type: "integration"
        description: "Test error scenarios and user feedback"
      - type: "integration"
        description: "Test optimistic updates and rollback on failures"
      - type: "integration"
        description: "Test data synchronization between frontend and backend"
      - type: "e2e"
        description: "Test complete user workflows with Playwright"

  - id: "UI-008"
    title: "Phase 3: Integrate Natural Language Processing"
    status: "pending"
    priority: "high"
    description: "Connect the NaturalLanguageEditor component to backend AI agents for real natural language processing of project and task modifications."
    dependencies:
      - "API-002"
      - "UI-007"
    estimated_hours: 4
    deliverables:
      - path: "frontend/src/services/agentService.ts"
        type: "file"
        description: "Service for AI agent API interactions"
      - path: "frontend/src/components/NaturalLanguageEditor/NaturalLanguageEditor.tsx"
        type: "file"
        description: "Updated component with real AI integration"
      - path: "backend/src/api/agent_routes.py"
        type: "file"
        description: "API routes for agent interactions"
    acceptance_criteria:
      - "Natural language commands processed by PlannerAgent"
      - "Real-time patch generation and preview"
      - "Apply generated changes to projects and tasks"
      - "Support for different types of modifications (create, update, delete)"
      - "Context-aware processing based on selected project/task"
      - "Error handling for invalid or ambiguous commands"
      - "Loading states during AI processing"
      - "Undo/redo functionality for applied changes"
    tests:
      - type: "unit"
        description: "Test agentService methods with mocked AI responses"
      - type: "unit"
        description: "Test NaturalLanguageEditor component with real API integration"
      - type: "unit"
        description: "Test patch generation and validation"
      - type: "unit"
        description: "Test error handling for invalid commands"
      - type: "integration"
        description: "Test natural language processing with real PlannerAgent"
      - type: "integration"
        description: "Test patch application and database updates"
      - type: "integration"
        description: "Test context-aware processing for different scenarios"
      - type: "integration"
        description: "Test undo/redo functionality"
      - type: "e2e"
        description: "Test complete natural language workflows"

  # UPDATED AGENT TASKS - NOW HIGH PRIORITY
  - id: "MVP-003c"
    title: "Phase 4: Implement DecomposerAgent"
    status: "pending"
    priority: "high"
    description: "Create the DecomposerAgent that splits projects or tasks into n approximately equal subtasks, with API integration for frontend use."
    dependencies:
      - "API-002"
    estimated_hours: 2
    deliverables:
      - path: "backend/src/agent/decomposer_agent.py"
        type: "file"
      - path: "backend/src/api/agent_routes.py"
        type: "file"
        description: "Add decomposition endpoints"
    acceptance_criteria:
      - "DecomposerAgent extends AgentBase."
      - "Agent takes a Project/Task node and target number n (default 6)."
      - "Agent returns patch with 'add' operations creating n children with balanced estimated_hours."
      - "Agent preserves total effort by dividing parent's estimated_hours by n."
      - "Works recursively - can decompose tasks into subtasks."
      - "API endpoint POST /api/tasks/{id}/decompose"
      - "Integration with frontend task decomposition UI"
    tests:
      - type: "unit"
        description: "Test decomposition of project with 60 hours into 6 tasks of ~10 hours each."
      - type: "unit"
        description: "Test decomposition of task into subtasks maintains effort balance."
      - type: "unit"
        description: "Verify patch contains only 'add' operations with correct paths."
      - type: "unit"
        description: "Test API endpoint request/response validation"
      - type: "integration"
        description: "Test decomposition with real database operations"
      - type: "integration"
        description: "Test frontend integration with decomposition API"
      - type: "e2e"
        description: "Test user workflow for task decomposition"

  - id: "MVP-003d"
    title: "Phase 4: Implement EditorAgent"
    status: "pending"
    priority: "high"
    description: "Create the EditorAgent that modifies existing projects or tasks based on user feedback and additional context, with API integration for frontend use."
    dependencies:
      - "API-002"
    estimated_hours: 2
    deliverables:
      - path: "backend/src/agent/editor_agent.py"
        type: "file"
      - path: "backend/src/api/agent_routes.py"
        type: "file"
        description: "Add editing endpoints"
    acceptance_criteria:
      - "EditorAgent extends AgentBase."
      - "Agent takes current Project/Task state plus user instructions for modifications."
      - "Agent returns minimal patch with 'replace', 'remove', or 'add' operations."
      - "Agent preserves unrelated fields (only changes what user requests)."
      - "Handles various edit types: update descriptions, change estimates, rename, reorder, etc."
      - "API endpoint POST /api/agent/edit with project/task context"
      - "Integration with NaturalLanguageEditor for editing commands"
    tests:
      - type: "unit"
        description: "Test editing task description returns patch with single 'replace' operation."
      - type: "unit"
        description: "Test removing a field returns patch with 'remove' operation."
      - type: "unit"
        description: "Verify unmentioned fields are not included in patch."
      - type: "unit"
        description: "Test API endpoint request/response validation"
      - type: "integration"
        description: "Test editing with real database operations"
      - type: "integration"
        description: "Test frontend integration with editing API"
      - type: "e2e"
        description: "Test user workflow for natural language editing"

  - id: "MVP-003e"
    title: "Phase 4: Implement AgentFactory"
    status: "pending"
    priority: "medium"
    description: "Create the factory class that instantiates the correct agent based on conversation intent, with enhanced intent detection capabilities."
    dependencies:
      - "MVP-003c"
      - "MVP-003d"
    estimated_hours: 1
    deliverables:
      - path: "backend/src/agent/factory.py"
        type: "file"
      - path: "backend/src/agent/intent_detector.py"
        type: "file"
        description: "AI-powered intent detection from natural language"
    acceptance_criteria:
      - "AgentFactory has get_agent(intent: Literal['plan', 'split', 'edit']) method."
      - "Factory returns correct agent instance based on intent."
      - "Factory handles LLM client injection for all agents."
      - "Clear error handling for unknown intents."
      - "Intent detection from natural language commands"
      - "Fallback to PlannerAgent for ambiguous intents"
    tests:
      - type: "unit"
        description: "Test factory returns PlannerAgent for 'plan' intent."
      - type: "unit"
        description: "Test factory returns DecomposerAgent for 'split' intent."
      - type: "unit"
        description: "Test factory returns EditorAgent for 'edit' intent."
      - type: "unit"
        description: "Test factory raises ValueError for unknown intent."
      - type: "unit"
        description: "Test intent detection from natural language commands"
      - type: "integration"
        description: "Test intent detection with real LLM responses"
      - type: "integration"
        description: "Test factory integration with agent service"

  - id: "MVP-004"
    title: "Phase 4: Develop Agent Prompt Templates"
    status: "pending"
    priority: "medium"
    description: "Develop and refine the prompt templates for all three agent types (Planner, Decomposer, Editor). These prompts are critical for guiding the LLM to produce the correct output."
    dependencies:
      - "MVP-003e"
    estimated_hours: 2
    deliverables:
      - path: "backend/src/agent/prompts.py"
        type: "file"
        description: "Extend existing prompts with new agent templates"
    acceptance_criteria:
      - "Planner prompt instructs AI on high-level project structuring and metadata generation."
      - "Decomposer prompt instructs AI on balanced task splitting with effort preservation."
      - "Editor prompt instructs AI on minimal, targeted modifications."
      - "All prompts share common system instructions (JSON patch output only, RFC 6902 compliance)."
      - "Prompts use Jinja2 templating for variable injection."
      - "Context-aware prompts based on current project/task state"
    tests:
      - type: "unit"
        description: "Test that the prompt formatting function correctly injects context (e.g., project state, user message) into each template."
      - type: "unit"
        description: "Verify all prompts include JSON schema examples and constraints."
      - type: "unit"
        description: "Test prompt size stays within reasonable token limits for various input sizes."
      - type: "unit"
        description: "Test context-aware prompt generation"
      - type: "integration"
        description: "Test prompts with real LLM responses for quality"
      - type: "integration"
        description: "Test prompt effectiveness across different agent types"

  # REMOVED - MVP-005: Backend API already exists and orchestration covered by API-002

  # REMOVED - MVP-006: Frontend already built with React/TypeScript

  # REMOVED - MVP-007: Frontend rendering already implemented with React components

  # REMOVED - MVP-008: Frontend interaction already implemented with React hooks

  # NEW TASKS FOR ENHANCED FUNCTIONALITY
  - id: "UI-009"
    title: "Phase 5: Implement Project/Task Creation Modals"
    status: "pending"
    priority: "medium"
    description: "Add modal dialogs for creating and editing projects and tasks with comprehensive form validation and user feedback."
    dependencies:
      - "UI-007"
    estimated_hours: 3
    deliverables:
      - path: "frontend/src/components/ProjectModal/ProjectModal.tsx"
        type: "file"
      - path: "frontend/src/components/ProjectModal/ProjectModal.test.tsx"
        type: "file"
      - path: "frontend/src/components/TaskModal/TaskModal.tsx"
        type: "file"
      - path: "frontend/src/components/TaskModal/TaskModal.test.tsx"
        type: "file"
      - path: "frontend/src/components/ConfirmDialog/ConfirmDialog.tsx"
        type: "file"
      - path: "frontend/src/components/ConfirmDialog/ConfirmDialog.test.tsx"
        type: "file"
    acceptance_criteria:
      - "Modal for creating new projects with all required fields"
      - "Modal for editing existing projects with pre-filled data"
      - "Modal for creating new tasks with project assignment"
      - "Modal for editing existing tasks with hierarchical support"
      - "Form validation with real-time feedback"
      - "Confirmation dialog for delete operations"
      - "Proper modal state management and cleanup"
      - "Keyboard navigation and accessibility support"
      - "Integration with existing API services"
    tests:
      - type: "unit"
        description: "Test ProjectModal component renders correctly for create and edit modes"
      - type: "unit"
        description: "Test TaskModal component renders correctly for create and edit modes"
      - type: "unit"
        description: "Test form validation with valid and invalid inputs"
      - type: "unit"
        description: "Test ConfirmDialog component with different confirmation types"
      - type: "integration"
        description: "Test modal integration with API services"
      - type: "integration"
        description: "Test modal state management and cleanup"
      - type: "accessibility"
        description: "Test modal accessibility with screen readers and keyboard navigation"
      - type: "e2e"
        description: "Test complete create/edit/delete workflows through modals"

  - id: "UI-010"
    title: "Phase 5: Enhanced Natural Language Features"
    status: "pending"
    priority: "medium"
    description: "Add advanced natural language processing features including conversation history, context awareness, and multi-turn interactions."
    dependencies:
      - "UI-008"
      - "MVP-003e"
    estimated_hours: 4
    deliverables:
      - path: "frontend/src/components/ConversationHistory/ConversationHistory.tsx"
        type: "file"
      - path: "frontend/src/components/ConversationHistory/ConversationHistory.test.tsx"
        type: "file"
      - path: "frontend/src/hooks/useConversationHistory.ts"
        type: "file"
      - path: "frontend/src/services/conversationService.ts"
        type: "file"
      - path: "backend/src/api/conversation_routes.py"
        type: "file"
      - path: "backend/src/models/conversation.py"
        type: "file"
    acceptance_criteria:
      - "Conversation history display with timestamps"
      - "Context-aware natural language processing"
      - "Multi-turn conversation support"
      - "Undo/redo functionality for applied changes"
      - "Conversation persistence across sessions"
      - "Export conversation history"
      - "Command suggestions based on context"
      - "Conversation branching for different scenarios"
    tests:
      - type: "unit"
        description: "Test ConversationHistory component with different conversation states"
      - type: "unit"
        description: "Test useConversationHistory hook with conversation management"
      - type: "unit"
        description: "Test conversationService methods with mocked responses"
      - type: "unit"
        description: "Test undo/redo functionality"
      - type: "integration"
        description: "Test conversation persistence with backend API"
      - type: "integration"
        description: "Test context-aware processing with real agents"
      - type: "integration"
        description: "Test multi-turn conversation flows"
      - type: "e2e"
        description: "Test complete conversation workflows"

  - id: "TEST-001"
    title: "Phase 5: End-to-End Testing Suite"
    status: "pending"
    priority: "medium"
    description: "Implement comprehensive end-to-end testing suite covering all critical user workflows and integration scenarios."
    dependencies:
      - "UI-009"
      - "UI-010"
    estimated_hours: 3
    deliverables:
      - path: "frontend/e2e/setup.ts"
        type: "file"
      - path: "frontend/e2e/project-management.spec.ts"
        type: "file"
      - path: "frontend/e2e/task-management.spec.ts"
        type: "file"
      - path: "frontend/e2e/natural-language.spec.ts"
        type: "file"
      - path: "frontend/e2e/error-scenarios.spec.ts"
        type: "file"
      - path: "frontend/playwright.config.ts"
        type: "file"
    acceptance_criteria:
      - "E2E tests for project CRUD operations"
      - "E2E tests for task CRUD operations"
      - "E2E tests for natural language commands"
      - "E2E tests for error scenarios and recovery"
      - "E2E tests for user authentication flows"
      - "Cross-browser testing configuration"
      - "CI/CD integration with test reports"
      - "Visual regression testing"
    tests:
      - type: "e2e"
        description: "Test complete project lifecycle from creation to deletion"
      - type: "e2e"
        description: "Test complete task lifecycle with hierarchical operations"
      - type: "e2e"
        description: "Test natural language processing workflows"
      - type: "e2e"
        description: "Test error handling and user feedback"
      - type: "e2e"
        description: "Test responsive design across different screen sizes"
      - type: "e2e"
        description: "Test performance under load"
      - type: "visual"
        description: "Test visual consistency across different browsers"
      - type: "accessibility"
        description: "Test accessibility compliance in real user scenarios"

  - id: "DOC-001"
    title: "Phase 5: Documentation and Deployment"
    status: "pending"
    priority: "low"
    description: "Create comprehensive documentation for the system including API documentation, user guides, and deployment instructions."
    dependencies:
      - "TEST-001"
    estimated_hours: 2
    deliverables:
      - path: "docs/API_SPECIFICATION.md"
        type: "file"
      - path: "docs/USER_GUIDE.md"
        type: "file"
      - path: "docs/DEPLOYMENT.md"
        type: "file"
      - path: "docs/ARCHITECTURE.md"
        type: "file"
        description: "Update with final architecture"
      - path: "backend/README.md"
        type: "file"
      - path: "frontend/README.md"
        type: "file"
    acceptance_criteria:
      - "Complete API documentation with examples"
      - "User guide with screenshots and workflows"
      - "Deployment instructions for different environments"
      - "Architecture documentation with diagrams"
      - "Development setup instructions"
      - "Troubleshooting guide"
      - "Performance optimization guide"
      - "Security considerations documentation"
    tests:
      - type: "documentation"
        description: "Verify all API endpoints are documented with examples"
      - type: "documentation"
        description: "Verify user guide covers all major workflows"
      - type: "documentation"
        description: "Verify deployment instructions work in different environments"
      - type: "documentation"
        description: "Verify architecture documentation is up-to-date"

# IMPLEMENTATION PRIORITY ORDER:
# 1. API-001 (Backend CRUD routes) - CRITICAL
# 2. API-002 (Orchestration service) - CRITICAL  
# 3. UI-007 (Frontend-backend connection) - CRITICAL
# 4. UI-008 (Natural language integration) - HIGH
# 5. MVP-003c (DecomposerAgent) - HIGH
# 6. MVP-003d (EditorAgent) - HIGH
# 7. MVP-003e (AgentFactory) - MEDIUM
# 8. MVP-004 (Prompt templates) - MEDIUM
# 9. UI-009 (Project/Task modals) - MEDIUM
# 10. UI-010 (Enhanced NL features) - MEDIUM
# 11. TEST-001 (E2E testing) - MEDIUM
# 12. DOC-001 (Documentation) - LOW
    description: "Implement the main event handling logic for the front-end, including chat submission and patch approval."
    dependencies:
      - "MVP-007"
    estimated_hours: 2
    deliverables:
      - path: "frontend/main.js"
        type: "file"
    acceptance_criteria:
      - "Chat submission correctly calls the API and renders the returned diff."
      - "Accepting a diff calls the apply-patch endpoint and refreshes the project view."
      - "The application correctly handles the initial state (creating a new project)."
    tests:
      - type: "e2e"
        description: "Using Playwright or Selenium, run a full user flow: start the backend, open the UI, create a project via chat, accept the diff, and verify the UI updates."
      - type: "e2e"
        description: "Verify that after the UI updates, the data is correctly persisted by checking the state of the test database."
